// var SerialPort  = require('serialport').SerialPort;
// var portName = 'COM3';
var http = require('http');

var express = require('express'), app = express();
var io = require('socket.io');
var server = http.createServer(app);

io = io.listen(server); //this return the new object we want to listen to
server.listen(8888);

app.set('views', __dirname + '/');
//serving files in ./js 
app.use(express.static(__dirname + '/'));

app.get('/', function(req, res){
  res.sendfile('index.html');
});

// var sp = new SerialPort(); // instantiate the serial port.
/*sp.open(portName, { // portName is instatiated to be COM3, replace as necessary
baudRate: 9600, // this is synced to what was set for the Arduino Code
dataBits: 8, // this is the default for Arduino serial communication
parity: 'none', // this is the default for Arduino serial communication
stopBits: 1, // this is the default for Arduino serial communication
flowControl: false // this is the default for Arduino serial communication
});*/

io.sockets.on('connection', function (socket) {
	// If socket.io receives message from the client browser then
	// this call back will be executed.
	socket.on('message', function (msg) {
		console.log(msg);
	});
	// If a web browser disconnects from Socket.IO then this callback is called.
	socket.on('disconnect', function () {
		console.log('disconnected');
	});
});
// var cleanData = ''; // this stores the clean data
// var readData = '';  // this stores the buffer
// sp.on('data', function (data) { // call back when data is received
// readData += data.toString(); // append data to buffer
// if the letters 'A' and 'B' are found on the buffer then isolate what's in the middle
// as clean data. Then clear the buffer.
// if (readData.indexOf('B') >= 0 && readData.indexOf('A') >= 0) {
// cleanData = readData.substring(readData.indexOf('A') + 1, readData.indexOf('B'));
// readData = '';
// io.sockets.emit('message', cleanData);
// }
// });
var angle = 0;
setInterval(function () {
	if (angle < Math.PI * 2.0) {
		angle += Math.PI / 1800.0;
	} else {
		angle = 0;
	}
	io.sockets.emit('message', (Math.random() * 0.0 + (Math.sin(angle) + 1) * 10).toString()+":"+(Math.random() * 0.0 + (Math.cos(angle+1.0) + 1) * 10).toString());
}, 20);


var serialPort = require("serialport");
serialPort.list(function (err, ports) {
  ports.forEach(function(port) {
    console.log(port.comName);
    console.log(port.pnpId);
    console.log(port.manufacturer);
	if(port.pnpId.indexOf("Arduino")>0){
	var serialport = require("serialport");
	var SerialPort = serialport.SerialPort; // localize object constructor
	var arduinoPort = new SerialPort(port.comName, {
	  baudrate: 115200,
	  parser: serialPort.parsers.readline("#")
	});
	arduinoPort.on("open", function () {
	  console.log('open');
	  arduinoPort.on('data', function(data) {
		console.log(data.toString());
		console.log("X");
	  });
	  arduinoPort.write("ls\n", function(err, results) {
		console.log('err ' + err);
		console.log('results ' + results);
	  });
	});	
	}
  });
});
